<launch>
  <!--Allows to specify the ethernet interface/s to be used. It defaults to the value of the env var ETHERCAT_PORT-->
  <!--More than one interface can be specified by concatenating them using underscore as a separator (e.g eth1_eth2_eth3) -->
  <arg name="eth_port" default="$(optenv ETHERCAT_PORT eth0)"/>
  <!-- Set to true for debugging -->
  <arg name="debug" default="false"/>
  <!-- Set to 0 if we don't want to run calibration controllers (e.g. for the muscle hand) -->
  <arg name="calibration_controllers" default="1"/>
    
  <include file="$(find sr_edc_launch)/sr_edc.machine" />

  <!-- publishes joint 0s joint states on separate topic for debug/tuning -->
  <node pkg="sr_utilities" name="joint_0_pub" type="joint_0_publisher.py"/>

  <!-- ros_ethercat -->
  <group if="$(arg debug)">
      <node name="realtime_loop" machine="local" pkg="ros_ethercat_loop" type="ros_ethercat_loop" args="-i $(arg eth_port) -r robot_description" output="screen" launch-prefix="gdb -ex run -args"><!-- launch-prefix="xterm -hold -e strace -f -e trace=!gettimeofday,futex"/> -->
        <param name="image_path" value="$(find sr_movements)/movements/test.png"/>
      </node>
  </group>
  <group unless="$(arg debug)">
      <node name="realtime_loop" machine="local" pkg="ros_ethercat_loop" type="ros_ethercat_loop" args="-i $(arg eth_port) -r robot_description" output="screen" launch-prefix="ethercat_grant">
        <param name="image_path" value="$(find sr_movements)/movements/test.png"/>
      </node>
  </group>

  <group if="$(arg calibration_controllers)">
    <group if="$(optenv THREE_FINGER 0)">
      <node name="calibrate_sr_edc" pkg="ros_ethercat_model" type="calibrate" output="screen"
	    args="cal_sh_rh_ffj0 cal_sh_rh_ffj3 cal_sh_rh_ffj4 cal_sh_rh_rfj0 cal_sh_rh_rfj3 cal_sh_rh_rfj4 cal_sh_rh_thj1 cal_sh_rh_thj2 cal_sh_rh_thj3 cal_sh_rh_thj4 cal_sh_rh_thj5 cal_sh_rh_wrj1 cal_sh_rh_wrj2"/>
    </group>
    <group unless="$(optenv THREE_FINGER 0)">
      <node name="calibrate_sr_edc" pkg="ros_ethercat_model" type="calibrate" output="screen"
	    args="cal_sh_rh_ffj0 cal_sh_rh_ffj3 cal_sh_rh_ffj4 cal_sh_rh_mfj0 cal_sh_rh_mfj3 cal_sh_rh_mfj4 cal_sh_rh_rfj0 cal_sh_rh_rfj3 cal_sh_rh_rfj4 cal_sh_rh_lfj0 cal_sh_rh_lfj3 cal_sh_rh_lfj4 cal_sh_rh_lfj5 cal_sh_rh_thj1 cal_sh_rh_thj2 cal_sh_rh_thj3 cal_sh_rh_thj4 cal_sh_rh_thj5 cal_sh_rh_wrj1 cal_sh_rh_wrj2"/>
    </group>
  </group>

  <!-- diagnostic aggregator for being able to see the results in the robot_monitor -->
  <node pkg="diagnostic_aggregator" type="aggregator_node" name="diagnostic_aggregator">
    <rosparam command="load"  file="$(find sr_ethercat_hand_config)/diagnostic_analyzer.yaml"/>
  </node>

  <include file="$(find ros_ethercat_model)/launch/joint_state_publisher.launch"/>

  <!-- Robot state publisher: transforming the joints angles to tf. -->
  <node pkg="robot_state_publisher" type="state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="100.0" />
  </node>
</launch>
