<launch>
  <arg name="debug" default="false"/>

  <!-- ROBOT CONFIG-->
  <!-- setting this parameter to false allows to load the robot_description from a higher level -->
  <arg name="load_robot_description" default="true"/>

  <!-- Xacro file containing the robot description we want to load -->
  <arg name="robot_description" default="'$(find sr_description)/robots/bimanual_shadowhand_motor.urdf.xacro'"/>
  <arg name="load_robot_description_command" default="xacro --inorder $(arg robot_description) arm_1_z:=$(arg arm_1_z) arm_2_z:=$(arg arm_2_z) arm_x_separation:=$(arg arm_x_separation) arm_y_separation:=$(arg arm_y_separation)"/>

  <!-- HANDS CONFIG-->
  <arg name="lh_id" default="lh"/>
  <arg name="rh_id" default="rh"/>
  <arg name="rh_serial" default="1290"/>
  <arg name="lh_serial" default="1338"/>
  <arg name="rh_mapping_path" default="$(find sr_edc_launch)/mappings/default_mappings/rh_E_v3.yaml"/>
  <arg name="lh_mapping_path" default="$(find sr_edc_launch)/mappings/default_mappings/lh_E_v3.yaml"/>
  <!-- Allows to specify the ethernet interface/s to be used. It defaults to the value of the env var ETHERCAT_PORT
       More than one interface can be specified by concatenating them using underscore as a separator (e.g eth1_eth2_eth3) -->
  <arg name="eth_port" default="$(optenv ETHERCAT_PORT eth0)"/>
  <!-- The control mode PWM (true) or torque (false) -->
  <arg name="pwm_control" default="$(optenv PWM_CONTROL 0)"/>
  <!-- Set to 0 if we don't want to run calibration controllers (e.g. for the muscle hand) -->
  <arg name="calibration_controllers" default="1"/>

  <!-- ARMS CONFIG-->
  <arg name="arm_1_z" default="0.01"/>
  <arg name="arm_2_z" default="0.01"/>
  <arg name="arm_x_separation" default="1.5"/>
  <arg name="arm_y_separation" default="0.0"/>
  <!-- The robot state publisher publishing frequency  -->
  <arg name="robot_state_pub_frequency" default="100"/>
  <!-- The joint state publisher publishing frequency  -->
  <arg name="joint_state_pub_frequency" default="100"/>

  <!-- this should be false if robot_hardware param is defined elsewhere -->
  <arg name="define_robot_hardware" default="true"/>

  <param name="/use_sim_time" value="false"/>

  <!-- Loads the robot description from the file passed as an argument -->
  <param if="$(arg load_robot_description)" name="robot_description" command="$(arg load_robot_description_command)"/>

  <param name="/hand/mapping/$(arg rh_serial)" value="$(arg rh_id)"/>
  <param name="/hand/mapping/$(arg lh_serial)" value="$(arg lh_id)"/>
  <param name="/hand/joint_prefix/$(arg rh_serial)" value="$(arg rh_id)_"/>
  <param name="/hand/joint_prefix/$(arg lh_serial)" value="$(arg lh_id)_"/>

  <!-- Load parameters for the right hand -->
  <include file="$(find sr_edc_launch)/load_hand_parameters.xml">
    <arg name="hand_id" value="$(arg rh_id)"/>
    <arg name="use_ns" value="true"/>
    <arg name="pwm_control" value="$(arg pwm_control)"/>
    <arg name="mapping_path" value="$(arg rh_mapping_path)"/>
  </include>

  <!-- Load parameters for the left hand -->
  <include file="$(find sr_edc_launch)/load_hand_parameters.xml">
    <arg name="hand_id" value="$(arg lh_id)"/>
    <arg name="use_ns" value="true"/>
    <arg name="pwm_control" value="$(arg pwm_control)" />
    <arg name="mapping_path" value="$(arg lh_mapping_path)"/>
  </include>

  <include file="$(find sr_edc_launch)/sr_edc.machine"/>

  <!-- publishes joint 0s joint states on separate topic for debug/tuning -->
  <node pkg="sr_utilities" name="joint_0_pub" type="joint_0_publisher.py"/>

  <!-- ros_ethercat -->
  <rosparam if="$(arg define_robot_hardware)">
    robot_hardware:
      - unique_robot_hw
  </rosparam>
  <include file="$(find sr_edc_launch)/hand_ros_control_robot_params.xml">
    <arg name="eth_port" value="$(arg eth_port)"/>
    <arg name="robot_hardware_name" value="unique_robot_hw"/>
    <arg name="bimanual_filter" value="true"/>
  </include>

  <node if="$(arg debug)" name="sr_bimanual_hands_robot" pkg="ros_control_robot" type="ros_control_robot" args="" output="screen" launch-prefix="gdb -ex run -args">
    <param if="$(arg pwm_control)" name="$(arg rh_id)/default_control_mode" value="PWM"/>
    <param unless="$(arg pwm_control)" name="$(arg rh_id)/default_control_mode" value="FORCE"/>

    <param if="$(arg pwm_control)" name="$(arg lh_id)/default_control_mode" value="PWM"/>
    <param unless="$(arg pwm_control)" name="$(arg lh_id)/default_control_mode" value="FORCE"/>

    <param name="image_path" value="$(find sr_movements)/movements/test.png"/>
  </node>

  <node unless="$(arg debug)" name="sr_bimanual_hands_robot" pkg="ros_control_robot" type="ros_control_robot" args="" output="screen" launch-prefix="ethercat_grant">
    <param if="$(arg pwm_control)" name="$(arg rh_id)/default_control_mode" value="PWM"/>
    <param unless="$(arg pwm_control)" name="$(arg rh_id)/default_control_mode" value="FORCE"/>

    <param if="$(arg pwm_control)" name="$(arg lh_id)/default_control_mode" value="PWM"/>
    <param unless="$(arg pwm_control)" name="$(arg lh_id)/default_control_mode" value="FORCE"/>

    <param name="image_path" value="$(find sr_movements)/movements/test.png"/>
  </node>

  <group if="$(arg calibration_controllers)">
    <node name="calibrate_sr_edc" pkg="sr_utilities" type="calibrate_hand_finder.py" output="screen"/>
  </group>

  <!-- diagnostic aggregator for being able to see the results in the robot_monitor -->
  <include file="$(find sr_hand_config)/common/launch/load_diagnostic_analyzer.launch"  ns="diagnostic_aggregator">
    <arg name="hand_serials_list" value="[$(arg rh_serial), $(arg lh_serial)]"/>
  </include>

  <node name="conditional_delayed_rostool_diagnostic_aggregator" pkg="sr_utilities_common" type="conditional_delayed_rostool.py" output="screen">
    <param name="package_name" value="diagnostic_aggregator" />
    <param name="executable_name" value="aggregator_node" />
    <rosparam param="params_list">[/diagnostic_aggregator/analyzers]</rosparam>
  </node>

  <!-- Joint state publisher -->
  <include file="$(find ros_ethercat_model)/launch/joint_state_publisher.launch">
      <arg name="publish_rate" value="$(arg joint_state_pub_frequency)"/>
    </include>

  <!-- Robot state publisher: transforming the joints angles to tf.  -->
  <node name="conditional_delayed_rostool_robot_state_publisher" pkg="sr_utilities_common" type="conditional_delayed_rostool.py" output="screen">
    <param name="package_name" value="robot_state_publisher" />
    <param name="executable_name" value="robot_state_publisher" />
    <rosparam param="params_list">[/robot_description]</rosparam>
    <param name="launch_args_list" value="publish_frequency=$(arg robot_state_pub_frequency)"/>
  </node>

  <!-- adding tactile state publisher using the tf prefix as a namespace -->
  <include file="$(find sr_tactile_sensor_controller)/sr_tactile_sensor.launch">
   <arg name="hand_id" value="$(arg rh_id)" />
  </include>

  <include file="$(find sr_tactile_sensor_controller)/sr_tactile_sensor.launch">
   <arg name="hand_id" value="$(arg lh_id)" />
  </include>

  <node name="teach_mode_node" pkg="sr_robot_launch" type="teach_mode_node" output="screen"/>

</launch>
